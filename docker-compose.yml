services:
  # MCP Server - HTTP API for tools
  mcp-server:
    build:
      context: ./services/mcp-server
      dockerfile: Dockerfile
    container_name: travel-weather-mcp
    environment:
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    networks:
      - travel-weather-network
    volumes:
      - logs:/app/logs
    ports:
      - "8000:8000"  # HTTP API for MCP tools
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Agent Service - AI logic
  travel-agent:
    build:
      context: ./services/agent
      dockerfile: Dockerfile
    container_name: travel-weather-agent
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PYTHONUNBUFFERED=1
      - MCP_SERVER_URL=http://mcp-server:8000
    restart: unless-stopped
    depends_on:
      - mcp-server
    networks:
      - travel-weather-network
    volumes:
      - logs:/app/logs
      - agent-data:/data  # Persistent database storage
    ports:
      - "8001:8001"  # Agent HTTP API
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Web interface - pure frontend
  agent-web:
    build:
      context: ./services/web
      dockerfile: Dockerfile
    container_name: travel-weather-web
    environment:
      - AGENT_SERVICE_URL=http://travel-agent:8001
    restart: unless-stopped
    depends_on:
      - travel-agent
    networks:
      - travel-weather-network
    ports:
      - "8080:8080"  # Web interface port
    volumes:
      - logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Open WebUI - Web-based UI for the agent
  openwebui:
    image: ghcr.io/open-webui/open-webui:latest
    container_name: travel-weather-openwebui
    environment:
      - PORT=8002
    ports:
      - "8002:8002"  # Open WebUI port
    volumes:
      - openwebui:/app/backend/data  # Persistent storage for Open WebUI data
    networks:
      - travel-weather-network
    restart: unless-stopped

networks:
  travel-weather-network:
    driver: bridge
    name: travel-weather-network

volumes:
  logs:
    driver: local
  agent-data:
    driver: local  # Persistent storage for conversation database
  openwebui:
    driver: local  # Persistent storage for Open WebUI data
